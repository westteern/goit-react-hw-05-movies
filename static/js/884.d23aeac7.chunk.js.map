{"version":3,"file":"static/js/884.d23aeac7.chunk.js","mappings":"+SAEMA,EAAU,mCACVC,EAAW,gCAEJC,EAAiB,mCAAG,0FAChB,qBADgB,SAERC,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OADR,qBACQ,oBAA0CD,IAFlC,cAEzBI,EAFyB,yBAGxBA,EAASC,KAAKC,SAHU,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMC,GAAN,gFACvBC,EADuB,gBACLD,GADK,SAENL,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OAAwBQ,EAAxB,oBAA0CT,IAFpC,cAEvBI,EAFuB,yBAGtBA,EAASC,MAHa,2CAAH,sDAMfK,EAAe,mCAAG,WAAMF,GAAN,gFACvBC,EADuB,gBACLD,EADK,qBAENL,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OAAwBQ,EAAxB,oBAA0CT,IAFpC,cAEvBI,EAFuB,yBAGtBA,EAASC,MAHa,2CAAH,sDAMfM,EAAe,mCAAG,WAAMH,GAAN,gFACvBC,EADuB,gBACLD,EADK,qBAENL,EAAAA,EAAAA,IAAA,UAAaF,GAAb,OAAwBQ,EAAxB,oBAA0CT,IAFpC,cAEvBI,EAFuB,yBAGtBA,EAASC,MAHa,2CAAH,sDAMfO,EAAc,mCAAG,WAAMC,GAAN,qGAELV,EAAAA,EAAAA,IAAA,UAClBF,GADkB,OAFK,eAEL,oBACWD,EADX,kBAC4Ba,IAHvB,cAEtBT,EAFsB,yBAKrBA,EAASC,KAAKC,SALO,2CAAH,qD,+FC6D3B,UA9EqB,WAAO,IAAD,EACjBE,GAAOM,EAAAA,EAAAA,MAAPN,GACFO,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAO,UAAAJ,EAASK,aAAT,eAAgBD,OAAQ,IACrC,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,YACkB,SAAAlB,GACxB,IACEiB,GAAa,IACblB,EAAAA,EAAAA,IAAgBC,GAAImB,MAAK,SAAAC,GAAC,OAAIL,EAAgBK,EAApB,GAK3B,CAJC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CALD,QAMEJ,GAAa,EACd,CACF,CACDO,CAAkBxB,EACnB,GAAE,CAACA,IAEJ,IAAQyB,EACNX,EADMW,eAAgBC,EACtBZ,EADsBY,OAAQC,EAC9Bb,EAD8Ba,SAAUC,EACxCd,EADwCc,YAAaC,EACrDf,EADqDe,aAEjDC,EAAkBJ,EACpBA,EAAOK,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MACrC,KACAC,EAAUP,EAAD,0CAE0BA,GADnC,4DAGEQ,GAAwB,IAAfP,EAAsB,IAAIQ,UAGzC,OACE,gCACGrB,IAAa,SAAC,IAAD,KACZA,GAAaF,IACb,6BACE,mBAAQwB,QAPD,kBAAM7B,EAASE,EAAf,EAOP,sBACA,4BACE,gBAAK4B,IAAKJ,EAAQK,IAAKf,KACvB,wBAAKA,KACL,wCAAgBW,EAAhB,SACA,sCACA,uBAAIT,KACJ,oCACA,uBAAIG,QAEN,mDACA,2BACE,yBACE,SAAC,KAAD,CAAMlB,MAAO,CAAED,KAAAA,GAAQ8B,GAAG,OAA1B,qBAIF,yBACE,SAAC,KAAD,CAAM7B,MAAO,CAAED,KAAAA,GAAQ8B,GAAG,UAA1B,2BAKJ,SAAC,KAAD,SAKT,C","sources":["api-service/api-service.js","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '50f1c38da446101780a79b9df9405e4f';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  const params = 'trending/movie/day';\n  const responce = await axios.get(`${BASE_URL}${params}?api_key=${API_KEY}`);\n  return responce.data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const params = `movie/${id}`;\n  const responce = await axios.get(`${BASE_URL}${params}?api_key=${API_KEY}`);\n  return responce.data;\n};\n\nexport const getMovieCredits = async id => {\n  const params = `movie/${id}/credits`;\n  const responce = await axios.get(`${BASE_URL}${params}?api_key=${API_KEY}`);\n  return responce.data;\n};\n\nexport const getMovieReviews = async id => {\n  const params = `movie/${id}/reviews`;\n  const responce = await axios.get(`${BASE_URL}${params}?api_key=${API_KEY}`);\n  return responce.data;\n};\n\nexport const getSearchMovie = async query => {\n  const params = `search/movie`;\n  const responce = await axios.get(\n    `${BASE_URL}${params}?api_key=${API_KEY}&query=${query}`\n  );\n  return responce.data.results;\n};\n","import PropTypes from 'prop-types';\nimport { getMovieDetails } from 'api-service/api-service';\nimport {\n  useParams,\n  useNavigate,\n  useLocation,\n  Link,\n  Outlet,\n} from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Loader from 'components/Loader';\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const from = location.state?.from || '/';\n  const [movieDetails, setMovieDetails] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieDetails = id => {\n      try {\n        setIsLoading(true);\n        getMovieDetails(id).then(r => setMovieDetails(r));\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieDetails(id);\n  }, [id]);\n\n  const { original_title, genres, overview, poster_path, vote_average } =\n    movieDetails;\n  const genreFormatting = genres\n    ? genres.map(genre => genre.name).join(', ')\n    : null;\n  let poster = !poster_path\n    ? 'https://via.placeholder.com/300x450?text=Poster+Not+Found'\n    : `https://image.tmdb.org/t/p/w300/${poster_path}`;\n\n  const vote = ((vote_average * 100) / 10).toFixed();\n  const goBack = () => navigate(from);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {!isLoading && movieDetails && (\n        <main>\n          <button onClick={goBack}>Go back</button>\n          <div>\n            <img src={poster} alt={original_title} />\n            <h1>{original_title}</h1>\n            <p>User Score: {vote} %</p>\n            <h2>Overview</h2>\n            <p>{overview}</p>\n            <h2>Genres</h2>\n            <p>{genreFormatting}</p>\n          </div>\n          <h3>Aditional information</h3>\n          <ul>\n            <li>\n              <Link state={{ from }} to=\"cast\">\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link state={{ from }} to=\"reviews\">\n                Reviews\n              </Link>\n            </li>\n          </ul>\n          <Outlet />\n        </main>\n      )}\n    </>\n  );\n};\n\nMovieDetails.propTypes = {\n  movieById: PropTypes.shape({\n    original_title: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    vote_average: PropTypes.number,\n    overview: PropTypes.array,\n    genres: PropTypes.array,\n  }),\n};\nexport default MovieDetails;\n"],"names":["API_KEY","BASE_URL","getTrendingMovies","axios","responce","data","results","getMovieDetails","id","params","getMovieCredits","getMovieReviews","getSearchMovie","query","useParams","location","useLocation","navigate","useNavigate","from","state","useState","movieDetails","setMovieDetails","isLoading","setIsLoading","useEffect","then","r","error","console","log","fetchMovieDetails","original_title","genres","overview","poster_path","vote_average","genreFormatting","map","genre","name","join","poster","vote","toFixed","onClick","src","alt","to"],"sourceRoot":""}